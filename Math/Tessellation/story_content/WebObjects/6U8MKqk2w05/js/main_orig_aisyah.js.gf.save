var canvas, ctx;
var ratio;

var mousePositionX, mousePositionY;
var mousePressed = false;
var mouseMove = false;

var stop_shapes=[];
var check_boxes=[];
var moving_shapes=[], movingshape_counter=0;
var select_counter=-1;
var board_area;

var submit_button, rotate_button, undo_button, clearall_button;
var generating_flag=false, click_flag=false;
var endflag=-1;

var last_select_counter=-1;

var history_states=[], history_objects=[], history_values=[], history_counter=-1;
var temp_startpos=[];
var rotate_button_flag=false;

var audio = new Audio('sound/excellent.mp3');
var audio2 = new Audio('sound/good_try.mp3');
var audio_count = 0, audio2_count = 0;

var player; 
var proceedShow = false;

//customize control boxes
function clear() {
    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
}
function Button(ctx, x, y, w, h, flag, text, colors, images, clickCB) {
    this.x = x;
    this.y = y;
    this.width = w;
    this.height = h;
    this.colors = colors;
    this.text = text;
    this.images = images;
    this.ctx = ctx;
    this.flag=flag;
    this.state = 0;  // current button state

    var isClicking = false;

    /**
     * Check to see if the user is hovering over or clicking on the button.
     */
    this.update = function() {
        // check for hover
        if(this.flag && endflag==-1){
            if (mousePositionX >= ratio*this.x && mousePositionX <= ratio*(this.x + this.width) &&
                mousePositionY >= ratio*this.y && mousePositionY <= ratio*(this.y + this.height))
            {
                this.state = 1;
                // check for click
                if (mousePressed)
                {
                    this.state = 0;

                    if (typeof clickCB === 'function' && !isClicking)
                    {
                        clickCB();
                        isClicking = true;
                    }
                }
                else
                {
                    isClicking = false;
                }
                canvas.style.cursor = "pointer";
            }
            else
            {
                this.state = 0;
                canvas.style.cursor = "default";
            }
        }
    };

    /**
     * Draw the button.
     */
    this.draw = function() {
        this.ctx.save();

        if(this.images != null)
        {
            if(this.flag){
                var img = new Image();
                img.src = this.images[this.state];
                this.ctx.drawImage(img, this.x, this.y, this.width, this.height);
            }else{
                var img = new Image();
                img.src = this.images[2];
                this.ctx.drawImage(img, this.x, this.y, this.width, this.height);
            }

        }

        this.ctx.restore();
    };
}

function ProceedButton(ctx, x, y, w, h, flag, text, colors, images, clickCB) {
    this.x = x;
    this.y = y;
    this.width = w;
    this.height = h;
    this.colors = colors;
    this.text = text;
    this.images = images;
    this.ctx = ctx;
    this.flag=flag;
    this.state = 0;  // current button state

    var isClicking = false;

    /**
     * Check to see if the user is hovering over or clicking on the button.
     */
    this.update = function() {
        // check for hover
        if(this.flag){
            if (mousePositionX >= ratio*this.x && mousePositionX <= ratio*(this.x + this.width) &&
                mousePositionY >= ratio*this.y && mousePositionY <= ratio*(this.y + this.height))
            {
                this.state = 1;
                // check for click
                if (mousePressed)
                {
                    this.state = 0;

                    if (typeof clickCB === 'function' && !isClicking)
                    {
                        clickCB();
                        isClicking = true;
						proceedShow = true;
						
						
                    }
                }
                else
                {
                    isClicking = false;
                }
                canvas.style.cursor = "pointer";
            }
            else
            {
                this.state = 0;
                canvas.style.cursor = "default";
            }
        }
    };

    /**
     * Draw the button.
     */
    this.draw = function() {
        this.ctx.save();

        if(this.images != null)
        {
            if(this.flag){
                var img = new Image();
                img.src = this.images[this.state];
                this.ctx.drawImage(img, this.x, this.y, this.width, this.height);
            }else{
                var img = new Image();
                img.src = this.images[2];
                this.ctx.drawImage(img, this.x, this.y, this.width, this.height);
            }

        }

        this.ctx.restore();
    };
}

function StopShape(ctx, x, y, w, h, style){
    this.x = x;
    this.y = y;
    this.width = w;
    this.height = h;
    this.style=style;
    this.ctx=ctx;
    var isClicking=false;
    this.update=function(){
        if (endflag==-1 && mousePositionX >= ratio*this.x && mousePositionX <= ratio*(this.x + this.width) &&
            mousePositionY >= ratio*this.y && mousePositionY <= ratio*(this.y + this.height))
        {
            if(mousePressed){
                if(!isClicking && select_counter==-1){
                    moving_shapes[movingshape_counter]=new MovingShape(ctx, mousePositionX-this.width/2, mousePositionY-this.height/2, this.width, this.height, this.style, movingshape_counter, 1);

                    ////history_setting
                    //history_counter++;
                    //history_objects[history_counter]=movingshape_counter;
                    //history_states[history_counter]='init';
                    //history_values[history_counter]=null;
                    //
                    //// history_setting end

                    movingshape_counter++;
                    isClicking=true;
                    generating_flag=true;
                }
            }else{
                isClicking=false;
            }
        }
    };

    this.draw=function(){
        this.ctx.save();

        var img = new Image();
        switch (this.style){
            case 0:
                img.src = "img/shape60/1.png";
                break;
            case 1:
                img.src = "img/shape90/1.png";
                break;
            case 2:
                img.src = "img/shape108/1.png";
                break;
            case 3:
                img.src = "img/shape120/1.png";
                break;
            case 4:
                img.src = "img/shape128.6/1.png";
                break;
            case 5:
                img.src = "img/shape135/1.png";
                break;
        }

        this.ctx.drawImage(img, this.x, this.y, this.width, this.height);

        this.ctx.restore();
    };
}
function MovingShape(ctx, x, y, w, h, style, no, state){
    this.x = x;
    this.y = y;
    this.width = w;
    this.height = h;
    this.style=style;
    this.ctx=ctx;
    this.no=no;
    this.state=state;
    this.flag=true;
    var isClicking=false;
    this.update=function(){
        if(endflag==-1){
            if (mousePositionX >= ratio*this.x && mousePositionX <= ratio*(this.x + this.width) &&
                mousePositionY >= ratio*this.y && mousePositionY <= ratio*(this.y + this.height))
            {
                if(mousePressed && select_counter==-1){
                    select_counter=this.no;
                    click_flag=true;
                    last_select_counter=this.no;
                    temp_startpos[0]=this.x;
                    temp_startpos[1]=this.y;
                }
            }
            if(mousePressed && select_counter==this.no && !rotate_button_flag){
                this.x=mousePositionX/ratio-this.width/2;
                this.y=mousePositionY/ratio-this.height/2;
                if(this.x>board_area.x+board_area.width-this.width && !generating_flag)
                    this.x=board_area.x+board_area.width-this.width;
                if(this.x<board_area.x && !generating_flag)
                    this.x=board_area.x;
                if(this.y>board_area.y+board_area.height-this.height && !generating_flag)
                    this.y=board_area.y+board_area.height-this.height;
                if(this.y<board_area.y && !generating_flag)
                    this.y=board_area.y;
            }
            if(!mousePressed && generating_flag){
                if(this.x>board_area.x+board_area.width-this.width)
                    this.x=board_area.x+board_area.width-this.width;
                if(this.x<board_area.x)
                    this.x=board_area.x;
                if(this.y>board_area.y+board_area.height-this.height)
                    this.y=board_area.y+board_area.height-this.height;
                if(this.y<board_area.y)
                    this.y=board_area.y;
            }
        }
    };

    this.draw=function(){
        if(this.flag){
            this.ctx.save();

            var img = new Image();
            switch (this.style){
                case 0:
                    if(select_counter==this.no){
                        img.src = "img/shape60/"+this.state+"_a.png";
                    }else
                        img.src = "img/shape60/"+this.state+".png";
                    break;
                case 1:
                    if(select_counter==this.no){
                        img.src = "img/shape90/"+this.state+"_a.png";
                    }else
                        img.src = "img/shape90/"+this.state+".png";
                    break;
                case 2:
                    if(select_counter==this.no){
                        img.src = "img/shape108/"+this.state+"_a.png";
                    }else
                        img.src = "img/shape108/"+this.state+".png";
                    break;
                case 3:
                    if(select_counter==this.no){
                        img.src = "img/shape120/"+this.state+"_a.png";
                    }else
                        img.src = "img/shape120/"+this.state+".png";
                    break;
                case 4:
                    if(select_counter==this.no){
                        img.src = "img/shape128.6/"+this.state+"_a.png";
                    }else
                        img.src = "img/shape128.6/"+this.state+".png";
                    break;
                case 5:
                    if(select_counter==this.no){
                        img.src = "img/shape135/"+this.state+"_a.png";
                    }else
                        img.src = "img/shape135/"+this.state+".png";
                    break;
            }

            this.ctx.drawImage(img, this.x, this.y, this.width, this.height);

            this.ctx.restore();
        }

    };
}
function Checkbutton(ctx, x, y, value){
    this.x = x;
    this.y = y;
    this.width = 44;
    this.height = 50;
    this.value=value;
    this.ctx=ctx;
    this.state=0;
    var isClicking=false;

    this.update=function(){
        if(endflag==-1){
            if (mousePositionX >= ratio*this.x && mousePositionX <= ratio*(this.x + this.width) &&
                mousePositionY >= ratio*this.y && mousePositionY <= ratio*(this.y + this.height))
            {
                // check for click
                if (mousePressed)
                {
                    if(!isClicking && select_counter==-1){
                        if(this.state==0)
                            this.state=1;
                        else
                            this.state=0;
                        isClicking = true;
                    }

                }else
                {
                    isClicking = false;
                }
            }
        }

    };

    this.draw=function(){
        this.ctx.save();

        var img = new Image();
        if(this.state==0)
            img.src = "img/checkbutton/none.jpg";
        else
            img.src = "img/checkbutton/click.jpg";
        this.ctx.drawImage(img, this.x, this.y, this.width, this.height);

        this.ctx.restore();
    };
}
function BoardArea(ctx, x, y, w, h){
    this.ctx=ctx;
    this.x=x;
    this.y=y;
    this.width=w;
    this.height=h;

    this.draw=function(){
        this.ctx.save();

        var img = new Image();
        img.src = "img/board.jpg";
        this.ctx.drawImage(img, this.x, this.y, this.width, this.height);
        this.ctx.restore();
    };
}
//////////////////////////////
function DrawInitButtons(){
    stop_shapes[0]=new StopShape(ctx, 1000, 70, 74, 62, 0);
    stop_shapes[1]=new StopShape(ctx, 1000, 160, 70, 70, 1);
    stop_shapes[2]=new StopShape(ctx, 1000, 240, 80, 80, 2);
    stop_shapes[3]=new StopShape(ctx, 1000, 330, 90, 90, 3);
    stop_shapes[4]=new StopShape(ctx, 1000, 430, 100, 100, 4);
    stop_shapes[5]=new StopShape(ctx, 1000, 540, 80, 80, 5);
    check_boxes[0]=new Checkbutton(ctx, 1110, 90, 74, 62, 0);
    check_boxes[1]=new Checkbutton(ctx, 1110, 180, 70, 70, 1);
    check_boxes[2]=new Checkbutton(ctx, 1110, 260, 80, 80, 2);
    check_boxes[3]=new Checkbutton(ctx, 1110, 350, 90, 90, 3);
    check_boxes[4]=new Checkbutton(ctx, 1110, 450, 100, 100, 4);
    check_boxes[5]=new Checkbutton(ctx, 1110, 560, 80, 80, 5);
    board_area=new BoardArea(ctx, 250, 220, 600, 400);

    submit_button=new Button(ctx, 1000, 650, 198, 60, true, '1', null, ['img/btn_submit.png', 'img/btn_submit.png', 'img/btn_submit.png'], function(){
       var success_vals=[0, 1, 3];
        var count=0;
        var success_counter=0;
        var all_counter=0;
        for(var i=0; i<check_boxes.length; i++){
           if(check_boxes[i].state==1){
                all_counter++;
               if(i==0 || i==1 || i==3)
                    success_counter++;
           }
        }
        if(all_counter==3 && success_counter==3){
            endflag=2;//success
        }else
            endflag=1;//faild
        if(endflag!=2)
            endflag=1;//faild;
    });
	
	proceed_button=new ProceedButton(ctx, 1000, 650, 198, 60, true, '1', null, ['img/btn_proceed1.png', 'img/btn_proceed1.png', 'img/btn_proceed1.png'], function(){
		if(proceedShow == true){
		   player = window.parent.GetPlayer();
		   player.SetVar("polygon", "pass");
	   }

    });
	
    rotate_button=new Button(ctx, 80, 320, 125, 37, true, '1', null, ['img/btn_rotate.png', 'img/btn_rotate.png', 'img/btn_rotate.png'], function(){
        if(last_select_counter!=-1){
            //moving_shapes[last_select_counter].state++;
            //switch (moving_shapes[last_select_counter].style){
            //    case 0:
            //        if(moving_shapes[last_select_counter].state==4)
            //            moving_shapes[last_select_counter].state=1;
            //        break;
            //    case 1:
            //        if(moving_shapes[last_select_counter].state==5)
            //            moving_shapes[last_select_counter].state=1;
            //        break;
            //    case 2:
            //        if(moving_shapes[last_select_counter].state==7)
            //            moving_shapes[last_select_counter].state=1;
            //        break;
            //    case 3:
            //        if(moving_shapes[last_select_counter].state==7)
            //            moving_shapes[last_select_counter].state=1;
            //        break;
            //    case 4:
            //        if(moving_shapes[last_select_counter].state==8)
            //            moving_shapes[last_select_counter].state=1;
            //        break;
            //    case 5:
            //        if(moving_shapes[last_select_counter].state==9)
            //            moving_shapes[last_select_counter].state=1;
            //        break;
            //}
            rotate_button_flag=true;
            select_counter=last_select_counter;
            moving_shapes[select_counter].state++;
            switch (moving_shapes[select_counter].style){
                case 0:
                    if(moving_shapes[select_counter].state==4)
                        moving_shapes[select_counter].state=1;
                    break;
                case 1:
                    if(moving_shapes[select_counter].state==5)
                        moving_shapes[select_counter].state=1;
                    break;
                case 2:
                    if(moving_shapes[select_counter].state==7)
                        moving_shapes[select_counter].state=1;
                    break;
                case 3:
                    if(moving_shapes[select_counter].state==7)
                        moving_shapes[select_counter].state=1;
                    break;
                case 4:
                    if(moving_shapes[select_counter].state==8)
                        moving_shapes[select_counter].state=1;
                    break;
                case 5:
                    if(moving_shapes[select_counter].state==9)
                        moving_shapes[select_counter].state=1;
                    break;
            }

            console.log(select_counter);
            history_counter++;
                history_objects[history_counter]=last_select_counter;
                history_states[history_counter]='rotate';
                history_values[history_counter]=1;

        }
    });
    undo_button=new Button(ctx, 80, 370, 125, 37, true, '1', null, ['img/btn_undo.png', 'img/btn_undo.png', 'img/btn_undo.png'], function(){
        //console.log(history_counter);
        if(history_counter>-1){
            //select_counter=history_counter;
            if(history_states[history_counter]=="rotate"){
                moving_shapes[history_objects[history_counter]].state--;
                switch (moving_shapes[history_objects[history_counter]].style){
                    case 0:
                        if(moving_shapes[history_objects[history_counter]].state<1)
                            moving_shapes[history_objects[history_counter]].state=3;
                        break;
                    case 1:
                        if(moving_shapes[history_objects[history_counter]].state<1)
                            moving_shapes[history_objects[history_counter]].state=4;
                        break;
                    case 2:
                        if(moving_shapes[history_objects[history_counter]].state<1)
                            moving_shapes[history_objects[history_counter]].state=6;
                        break;
                    case 3:
                        if(moving_shapes[history_objects[history_counter]].state<1)
                            moving_shapes[history_objects[history_counter]].state=6;
                        break;
                    case 4:
                        if(moving_shapes[history_objects[history_counter]].state<1)
                            moving_shapes[history_objects[history_counter]].state=7;
                        break;
                    case 5:
                        if(moving_shapes[history_objects[history_counter]].state<1)
                            moving_shapes[history_objects[history_counter]].state=8;
                        break;
                }
                history_counter--;
            }else if(history_states[history_counter]=="move"){
                moving_shapes[history_objects[history_counter]].x=history_values[history_counter][0];
                moving_shapes[history_objects[history_counter]].y=history_values[history_counter][1];
                if(history_values[history_counter][0]>board_area.x+board_area.width)
                    moving_shapes[history_objects[history_counter]].flag=false;
                history_counter--;
            }
        }
    });
    clearall_button=new Button(ctx, 80, 420, 125, 37, true, '1', null, ['img/btn_clear-all.png', 'img/btn_clear-all.png', 'img/btn_clear-all.png'], function(){
        moving_shapes=[];
        movingshape_counter=0;
        for(var i=0; i< check_boxes.length; i++)
            check_boxes[i].state=0;
    });
}
function UpdateButtons(){
    board_area.draw();

    for(var i=0; i<moving_shapes.length; i++){
        moving_shapes[i].update();
        moving_shapes[i].draw();
    }

    for(var i=0; i<stop_shapes.length; i++){
        stop_shapes[i].update();
        stop_shapes[i].draw();
        check_boxes[i].update();
        check_boxes[i].draw();
    }

    if(endflag==-1){
        submit_button.update();
        submit_button.draw();
    }

    rotate_button.update();
    rotate_button.draw();

    undo_button.update();
    undo_button.draw();

    clearall_button.update();
    clearall_button.draw();

    
    if(endflag==1){
        var front_img = new Image();
        front_img.src="img/wrong.jpg";
        ctx.drawImage(front_img, 30, 70, front_img.width*1.36, front_img.height);
		
		if(audio2_count == 0){
			audio2.play();
			audio2_count = 1;
		}
		
		proceed_button.update();
        proceed_button.draw();
    }
}

function success(){
	var front_img = new Image();
	front_img.src="img/success.jpg";
	ctx.drawImage(front_img, 30, 70, front_img.width*1.3, front_img.height);
	
	if(audio_count == 0){
		audio.play();
		audio_count = 1;
	}
	
	proceed_button.update();
	proceed_button.draw();
}

function DrawScene(){
    ratio = ctx.canvas.clientWidth/1280;
    clear();
    //Draw Background
    var background = new Image();
    background.src="img/background.jpg";
    ctx.drawImage(background, 0, 0, ctx.canvas.width, ctx.canvas.height);

    //Update Buttons
    UpdateButtons();
	
	if(endflag==2){
        success();
    }
}

$(function() {
    
	/**GF:**/
    // Scrollbars off in browser - mobile not sure - tested in Chrome, IE 11
    $("body").css("overflow", "hidden");
    $("body").css("background-color", "#fff");
    //
    canvas = document.getElementById('gameCanvas');
    // canvas = document.getElementById('main');
    /**GF:**/

    ctx = canvas.getContext('2d');

    /**GF:**/
    function redraw() {
        //
        // http://www.html5rocks.com/en/tutorials/casestudies/gopherwoord-studios-resizing-html5-games/#disqus_thread
        //
        var gameArea = document.getElementById('gameArea'); // DIV wrapping the canvas
        var widthToHeight = 1280 / 720;                     // ***Must*** match to pick up mouse pointer
        var newWidth = window.innerWidth;                   // Not sure if cross-browser
        var newHeight = window.innerHeight;                 //       -- ditto --
        var newWidthToHeight = newWidth / newHeight;
        if (newWidthToHeight > widthToHeight) {
            // window width is too wide relative to desired game width
            newWidth = newHeight * widthToHeight;
            canvas.style.height = newHeight + 'px';         // Changed to canvas from div
            canvas.style.width = newWidth + 'px';           // Changed to canvas from div
        } else {
            // window height is too high relative to desired game height
            newHeight = newWidth / widthToHeight;
            canvas.style.width = newWidth + 'px';           // Changed to canvas from div
            canvas.style.height = newHeight + 'px';         // Changed to canvas from div
        }
        //
        canvas.style.marginTop = (-newHeight / 2) + 'px';   // Read the link
        canvas.style.marginLeft = (-newWidth / 2) + 'px';   // Read the link
    }
    // update on any window size change.
    window.addEventListener("resize", redraw);
    // first draw - just do it - now!
    redraw();
    /**GF:**/
	
    DrawInitButtons();

    canvas.addEventListener('mousemove', function (event) {
            var x=event.offsetX || event.layerX;
            var y=event.offsetY || event.layerY;
            var deltax=mousePositionX-x;
            var deltay=mousePositionY-y;
            if(Math.abs(deltax)>1 || Math.abs(deltay)>1){
                mouseMove = true;
            }
            mousePositionX=x;
            mousePositionY=y;
    });
    canvas.addEventListener('mousedown', function () {
        mousePressed=true;
        generating_flag=false;
        select_counter=-1;
    });
    canvas.addEventListener('mouseup', function () {
        mousePressed=false;
        rotate_button_flag=false;
        //if(select_counter!=-1 && click_flag && !mouseMove){
        //    moving_shapes[select_counter].state++;
        //    switch (moving_shapes[select_counter].style){
        //        case 0:
        //            if(moving_shapes[select_counter].state==4)
        //                moving_shapes[select_counter].state=1;
        //            break;
        //        case 1:
        //            if(moving_shapes[select_counter].state==5)
        //                moving_shapes[select_counter].state=1;
        //            break;
        //        case 2:
        //            if(moving_shapes[select_counter].state==7)
        //                moving_shapes[select_counter].state=1;
        //            break;
        //        case 3:
        //            if(moving_shapes[select_counter].state==7)
        //                moving_shapes[select_counter].state=1;
        //            break;
        //        case 4:
        //            if(moving_shapes[select_counter].state==8)
        //                moving_shapes[select_counter].state=1;
        //            break;
        //        case 5:
        //            if(moving_shapes[select_counter].state==9)
        //                moving_shapes[select_counter].state=1;
        //            break;
        //    }
        //    //history_setting
        //    history_counter++;
        //    history_objects[history_counter]=select_counter;
        //    history_states[history_counter]='rotate';
        //    history_values[history_counter]=1;
        //    // history_setting end
        //}
        if(select_counter!=-1 && mouseMove){
            //history_setting
            history_counter++;
            history_objects[history_counter]=select_counter;
            history_states[history_counter]='move';
            history_values[history_counter]=[temp_startpos[0], temp_startpos[1]];
            // history_setting end
        }
        //for(var i=0; i<history_counter; i++)
        //    select_counter=-1;
        mouseMove=false;
        click_flag=false;

    });

    canvas.addEventListener('touchstart', function (event){

    }, false);
    canvas.addEventListener('touchmove', function(event){

    }, false);

    setInterval(DrawScene, 150);
});

